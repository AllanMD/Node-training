- Instalar node y npm
https://www.hostinger.es/tutoriales/instalar-node-js-ubuntu/

#Express
Express: Framework backend para creacion de apis

https://expressjs.com/es/starter/installing.html --> documentacion oficial
https://medium.com/@asfo/desarrollando-una-sencilla-api-rest-con-nodejs-y-express-cab0813f7e4b
1. Iniciar proyecto con: npm init
2. Completar nombre del paquete, descrpicion , archivo de entrada como index.js y autor (si queremos), el resto dejar como esta.
3. npm install express --save --> para instalar la dependencia express // el --save es para guardarlo tambien en la lista de dependencias
4. npm install body-parser --save --> para manejo de datos por post
5. codear en el index.js

Para generar una estructura de proyecto:

- npm install express-generator -g
- express "nombre_proyecto"

#MIDDLEWARES:
Son funciones que acceden a los datos request, response y next en las llamadas a una api
http://expressjs.com/es/guide/writing-middleware.html

#NODEMON:
Modulo de node que reinicia el servidor automaticamente en cada cambio que se haga en el codigo.
npm install --save-dev nodemon --> para instalarlo y guardarlo como una dependencia de desarollo
- https://nodemon.io/
- si surge error al instalar, lo solucione usando: sudo npm install -g nodemon
- nodemon index.js --> para levantar el servidor

#DEV DEPENDENCIES
Son dependencias de desarrollo. Estas dependencias no son necesarias en producion y la aplicacion puede funcionar sin ellas
Ejemplo: nodemon, unit tests

#MYSQL con node.js
https://www.linuxadictos.com/como-instalar-xampp-en-linux.html --> para instalar xampp en linux
https://expressjs.com/es/guide/database-integration.html#mysql --> para instalar la dependencia en el proyecto y que quede en el package.json
1-npm install mysql
sudo /opt/lampp/manager-linux-x64.run --> comando para iniciar el panel de control xampp, tambien se puede iniciar los servidores mediante comandos
sudo /opt/lampp/lampp start ---> iniciar servidores xampp
sudo /opt/lampp/lampp stop ---> detener servidores xampp

con mysql existen las pools para conectarse, el cual es un canal de conexion a la q pueden conectarse multiples funciones, y se supone que es mas eficiente

sudo apt install net-tools --> para instalar un paquete que soluciona el error al querer iniciar servidores

#CALLBACKS:
Son funciones que se ejecutan despues de que otra funcion termine su ejecucion. Se usan para funciones que no tienen una respuesta inmediata, o que son asincronas, para de esta forma esperar a un resultado antes de continuar la ejecucion de la funcion
https://codeburst.io/javascript-what-the-heck-is-a-callback-aba4da2deced

VIDEO USADO COMO AYUDA
- https://www.youtube.com/watch?v=O3yNkUfkXfM

#TOKENS: 
https://carlosazaustre.es/que-es-la-autenticacion-con-token/
https://carlosazaustre.es/autenticacion-con-token-en-node-js/

los tokens se pueden recibir desde el header, o desde las cookies. Depende del proyecto.
En este tutorial se utiliza header.authentication 

#REDIS
https://redis.io/download --> para instalar
https://www.youtube.com/watch?v=aosnODRyppk ---> para instalar

npm install redis-server ---> en la carpeta del proyecto
redis-cli ---> para abrir el shell de redis

http://nightdeveloper.net/usando-redis-nodejs/

#ASYNC/AWAIT
https://www.adictosaltrabajo.com/2017/02/09/asyncawait-en-javascript/
Es otra forma de manejar asincronismo, en vez de manejar callbacks, se manejan promesas. Se utiliza el try, catch.

#MYSQL 2
npm install --save mysql2
https://www.npmjs.com/package/mysql2

#ARCHIVOS ESTATICOS
para servir archivos estaticos, archivos que no cambian como por ejemplo imagenes, archvis css, js
https://expressjs.com/es/starter/static-files.html
https://www.youtube.com/watch?v=2ue0EAc6k_g

#MULTER
Modulo para subir archivos 
https://www.npmjs.com/package/multer
https://www.youtube.com/watch?v=AbJ-y2vZgBs --> tutorial (quede en el min 40)
https://www.youtube.com/watch?v=aNYX2F1RX-s ---> tutorial mas avanzado


#NODEMAILER
Modulo node.js para el envio de emails.
servidor smtp: es como un servidor que sirve como cartero para enviar un correo. Recibe un mail y se encarga de enviarlo a los destinarios
https://serversmtp.com/es/que-es-servidor-smtp/ --> que es un servicio SMTP
https://ethereal.email/ ---> simulador de servicio SMTP
npm i nodemailer --> para instalar nodemailer en el proyecto
https://www.youtube.com/watch?v=wu-1LpCyu1Y ---> tutorial usado para hacer la demo

#JWT
https://www.sohamkamani.com/blog/javascript/2019-03-29-node-jwt-authentication/

en el ejemplo de la pagina, hay que usar cookie-parser:
npm i cookie-parser

los tokens se pueden recibir desde el header, o desde las cookies. Depende del proyecto.
En este tutorial, se hace con cookies
